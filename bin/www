#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("sequelize-with-express:server");
const http = require("http");
const ws = require("ws");
const sequelize = require("../db/models").sequelize;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const wss = new ws.Server({ server });

wss.on("connection", (socket) => {
  socket.isAlive = true;

  socket.on("pong", () => {
    socket.isAlive = true;
  });

  socket.on("message", (message) => {
    console.log("received %s:", message);
    const broadcastRegex = /^broadcast\:/;

    if (broadcastRegex.test(message)) {
      message.replace(broadcastRegex, "");

      wss.clients.forEach((client) => {
        if (client != socket) {
          client.send(`hello, broadcast -> ${message}`);
        }
      });
    } else {
      socket.send(`hello, you send -> ${message}`);
    }
  });

  socket.send(`hello, I'm a WebSocket server`);
});

setInterval(() => {
  wss.clients.forEach((socket) => {
    if (!socket.isAlive) return socket.terminate();

    socket.isAlive = false;
    socket.ping(null, false, true);
  });
}, 10000);

/**
 * Listen on provided port, on all network interfaces.
 */

sequelize
  .sync({ force: false })
  .then(() => {
    server.listen(port, () => {
      console.log(`ambitus-studio-api is listening on port ${port}`);
    });
  })
  .catch((error) => {
    if (error.message.includes("ECONNREFUSED")) {
      console.log(
        "Error: database server is not running - run command 'pg_ctl -D /usr/local/var/postgres start' to start database server then restart nodemon"
      ); // TODO: have node run this command automatically
    }
  });
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
